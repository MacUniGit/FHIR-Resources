@page "/patientinfo"
@page "/patientinfo/{PatientID}"
@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;

@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager

@*https://blazor.radzen.com/dialog*@

<div class="row">
	<div class="col-lg-6 d-flex">
		<RadzenCard Style="width: 100%; overflow: hidden;">
			<h3 class="h5">Info</h3>
			<div class="d-flex flex-row">
				@*Could use patient.photo to display the photo if available*@
				<RadzenImage Path="https://cdn-icons-png.flaticon.com/512/149/149071.png" Class="rounded-circle float-left mt-1 mr-3" Style="width: 90px; height: 90px;" />
				<div>
					<div>Name</div>
					<b>@patient.Name[0]</b>
					<div class="mt-3">Gender</div>
					<b>@patient.Gender</b>
				</div>
			</div>
		</RadzenCard>
	</div>
	<div class="col-lg-6 d-flex">
		<RadzenCard Style="width: 100%; overflow: hidden;">
			<h3 class="h5">Personal</h3>
			<div class="row">
				<div class="col">
					<div>Birthdate</div>
					<b>@patient.BirthDate</b>

					@*UN COMMENT*@
					@*<ErrorBoundary>
						<ChildContent>
						<div class="mt-3">@patient.Telecom.First().Use @patient.Telecom.First().System</div>
						<b>@patient.Telecom.First().Value</b>
						</ChildContent>
						<ErrorContent>
						<div class="mt-3">Contact</div>
						<b>Unknown</b>
						</ErrorContent>
						</ErrorBoundary>*@


				</div>
			</div>
		</RadzenCard>
	</div>
</div>
<div class="row my-4">
	<div class="col-md-12">
		<RadzenCard>
			<h3 class="h5">
				All available patient details for id: <b><a href="@($"http://hapi.fhir.org/baseR4/Patient/{patient.Id}")">@PatientID</a></b>
				<RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@patient.TypeName" Class="float-right" />
			</h3>

		</RadzenCard>

		<RadzenTabs TabPosition="@tabPosition" style=" margin: 20px auto;" RenderMode="TabRenderMode.Client">
			<Tabs>

				@*//more general info

					Things to include:
					patient.communication
					this shows languages and preferred language
					patient.maritalstatus
					self explanatory
					patient.generalPractitioner
					is a reference to their nominated primary care provider
					patient.link
					link to another patient resource of note
					patient.deceased
					Display if they are. This is an optional input
				*@

				<RadzenTabsItem Text="General">
					<RadzenCard class="m-3">
						<h3 class="h5"><b>Other Names</b></h3>
						<div class="row">
							<div class="col-md-4">
								<div>Family</div>
								<b>@(patient.Name[0].Family)</b>
								<div class="mt-3">Given</div>
								@foreach (var name in patient.Name[0].Given)
								{
									<p><b>@(name)</b></p>
								}
							</div>

						</div>
					</RadzenCard>

				</RadzenTabsItem>



				@*Showing patient address
					This has been verified on patient named
					Jack M Sprat, id: d338df....

					Could change this to contact,
					and loop through all telecom inputs aswell
					or use a dataTable
				*@
				<RadzenTabsItem Text="Address">
					@if (patient.Address.Count > 0)
					{
						<ErrorBoundary>
							<ChildContent>

								<RadzenCard class="m-3">
									<h3 class="h5"><b>@patient.Address[0].Use Address</b></h3>
									<div class="row">
										<div class="col-md-4">
											<div>Country</div>
											<b>@(patient.Address[0].Country)</b>
											<div class="mt-3">State</div>
											<b>@(patient.Address[0].State)</b>
										</div>
										<div class="col-md-4">
											<div>City</div>
											<b>@(patient.Address[0].City)</b>
											<div class="mt-3">Line</div>
											<b>@(patient.Address[0].Line.First()) </b>
										</div>
										<div class="col-md-4">
											<div>PostCode</div>
											<b>@(patient.Address[0].PostalCode)</b>
										</div>
									</div>
								</RadzenCard>
							</ChildContent>
							<ErrorContent>

							</ErrorContent>

						</ErrorBoundary>
					}
					else
					{
						<RadzenCard class="m-3">
							<h3 class="h5"><b>No Address information</b></h3>

						</RadzenCard>

					}
				</RadzenTabsItem>



				@*display contact persons info

					This needs to be checked, as i have not found a patient
					in the server with Emergency Contact data. If it works it
					should loop through all available contacts and show them.
				*@
				<RadzenTabsItem Text="Emergency Contact">
					@if (patient.Contact.Count > 0)
					{
						@foreach (var contact in patient.Contact)
						{
							<RadzenCard class="m-3">
								<h3 class="h5"><b>Emergency Contact Information</b></h3>
								<div class="row">
									<div class="col-md-4">
										<div>Relationship</div>
										<b>@(contact.Relationship.First().Text)</b>
										<div class="mt-3">Name</div>
										<b>@(contact.Name.First().Value)</b>
									</div>
									<div class="col-md-4">
										<div class="mt-3">Gender</div>
										<b>@(contact.Gender) </b>
										<div>@contact.Telecom.First().Use @contact.Telecom.First().System</div>
										<b>@(contact.Telecom.First().Value)</b>
									</div>
									<div class="col-md-4">
										<div>Address</div>
										<b>@patient.Address.First().City, @patient.Address.First().Line.First()</b>
									</div>
								</div>
							</RadzenCard>
						}
					}
					else
					{
						<RadzenCard class="m-3">
							<h3 class="h5"><b>No Emergency Contact Information</b></h3>
						</RadzenCard>
					}
				</RadzenTabsItem>


				@*Allergy tab*@
				<RadzenTabsItem Text="Known Allergies">
					<ErrorBoundary>
						<ChildContent>
							<RadzenDataGrid Data="@allergyResults" TItem="AllergyIntolerance" PageSize="10" AllowPaging="true"
											AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
											PagerHorizontalAlign="HorizontalAlign.Center">
								<Columns>
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Reaction" Title="Substance" Filterable="false" Sortable="false">
										<Template Context="allergy">
											@if (allergy.Reaction.Count > 0)
											{
												@if (allergy.Reaction.First().Substance != null)
												{
													<a>@allergy.Reaction.First().Substance.Text</a>
												}
												else
												{
													<a>No info</a>
												}
											}
											else
											{
												<a>No info</a>
											}
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Reaction" Title="Reaction" Filterable="false" Sortable="false">
										<Template Context="allergy">
											@if (allergy.Reaction.Count > 0)
											{
												var count = allergy.Reaction.First().Manifestation.Count;
												var temp = 1;
												@foreach (var reaction in allergy.Reaction.First().Manifestation)
												{
													if (temp >= count)
													{
														<a>@reaction.Coding.First().Display</a>
													}
													else
													{
														<a>@reaction.Coding.First().Display, </a>
													}
													temp++;
												}
											}
											else
											{
												<a>No info</a>
											}
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Criticality" Title="Criticality" Filterable="false" Sortable="false" />
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Category" Title="Category" Filterable="false" Sortable="false">
										<Template Context="allergy">
											@if (allergy.Category.Count() > 0)
											{
												<a>@allergy.Category.First()</a>
											}
											else
											{
												<a>No info</a>
											}
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Onset" Title="Onset Date" Filterable="false" Sortable="false" />
									<RadzenDataGridColumn TItem="AllergyIntolerance" Property="Id" Title="ID" />
								</Columns>
							</RadzenDataGrid>
						</ChildContent>
						<ErrorContent>
							<RadzenCard class="m-3">
								<h3 class="h5"><b>There was an error</b></h3>
							</RadzenCard>
						</ErrorContent>
					</ErrorBoundary>
				</RadzenTabsItem>


				@*Medication tab*@
				<RadzenTabsItem Text="Medication Statements">
					<ErrorBoundary>
						<ChildContent>
							<RadzenDataGrid Data="@medResults" TItem="MedicationStatement" PageSize="10" AllowPaging="true"
											AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
											PagerHorizontalAlign="HorizontalAlign.Center">
								<Columns>
									<RadzenDataGridColumn TItem="MedicationStatement" Property="Medication" Title="Medication" Filterable="false" Sortable="false">
										<Template Context="medstatement">
											@*This is to handle the two different datatypes for medication*@
											@if (medstatement.Medication.TypeName == "CodeableConcept")
											{
												var temp = (CodeableConcept)medstatement.Medication;
												<a>@temp.Coding.First().Display</a>
											}
											else
											{
												var temp = (ResourceReference)medstatement.Medication;
												@*Console.WriteLine(temp.Display);
												Console.WriteLine(temp.Reference);*@
												@if (temp.Reference.StartsWith("Medication"))
												{
													@*Due to med reference, open dialogue to view medication specifically*@
													<RadzenButton ButtonStyle="ButtonStyle.Light" Style="font-size: 14px; background-color: transparent; text-align:left; " Class="" Text="View Medication" />
												}
												else
												{
													<a>@temp.Display</a>
												}
											}
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="MedicationStatement" Property="Dosage" Title="Dosage" Filterable="false" Sortable="false">
										<Template Context="medstatement">
											<a>@medstatement.Dosage.First().Text</a>
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="MedicationStatement" Property="ReasonCode" Title="Reason" Filterable="false" Sortable="false">
										<Template Context="medstatement">
											<a>@medstatement.ReasonCode.First().Text</a>
										</Template>
									</RadzenDataGridColumn>
									<RadzenDataGridColumn TItem="MedicationStatement" Property="Id" Title="ID" />
								</Columns>
							</RadzenDataGrid>
						</ChildContent>
						<ErrorContent>
							<RadzenCard class="m-3">
								<h3 class="h5"><b>There was an error</b></h3>
							</RadzenCard>
						</ErrorContent>
					</ErrorBoundary>
				</RadzenTabsItem>
			</Tabs>
		</RadzenTabs>
	</div>
</div>


@code {
	[Parameter] public string PatientID { get; set; }
	private Hl7.Fhir.Model.HumanName patientName;
	private Patient patient;
	private AllergyIntolerance patientAllergy;
	private Bundle allergySearch = new Bundle();
	private Hl7.Fhir.Model.AllergyIntolerance[]? allergyResults;
	private Bundle medSearch = new Bundle();
	private Hl7.Fhir.Model.MedicationStatement[]? medResults;



	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	TabPosition tabPosition = TabPosition.Top;
	private string serverURL = "http://hapi.fhir.org/baseR4";

	protected override void OnInitialized()
	{

		FhirClient client = new FhirClient(serverURL);
		//Read the current version of a Patient resource
		patient = client.Read<Patient>("Patient/" + PatientID);
		Console.WriteLine(patient.Name[0]);
		patientName = patient.Name[0];




		//Allergy Information
		var q = new SearchParams()
			.Where("patient=" + PatientID)
			.LimitTo(100);

		try
		{
			allergySearch = client.Search<AllergyIntolerance>(q);
			allergyResults = new AllergyIntolerance[allergySearch.Entry.Count];

			//for every search result
			for (int i = 0; i < allergySearch.Entry.Count; i++)
			{
				//add patient to our list
				allergyResults[i] = (AllergyIntolerance)allergySearch.Entry[i].Resource;
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}



		//Medication Information
		var sParams = new SearchParams()
			.Where("subject=" + PatientID)
			.LimitTo(100);
		try
		{
			medSearch = client.Search<MedicationStatement>(sParams);
			medResults = new MedicationStatement[medSearch.Entry.Count];

			//for every search result
			for (int i = 0; i < medSearch.Entry.Count; i++)
			{
				medResults[i] = (MedicationStatement)medSearch.Entry[i].Resource;
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}


		//Read the patients current allergies
		//patientAllergy = client.Read<AllergyIntolerance>("AllergyIntolerance/" + 2830868);
		//Console.WriteLine(patientAllergy.CategoryElement[0].Value);
		//Console.WriteLine(patientAllergy.Criticality);
		//Console.WriteLine(patientAllergy.Code.Coding[0].Display);
		//Console.WriteLine(patientAllergy.Reaction[0].Manifestation[0].Coding[0].Display);
	}
}




