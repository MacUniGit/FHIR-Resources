@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;
@using FHIRBlazor.CustomComponents.TypeHandlers

@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager

@if (!loading)
{
	<ErrorBoundary>
		<ChildContent>
			<RadzenDataGrid Data="@results" TItem="Procedure" PageSize="10" AllowPaging="true"
						AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
						PagerHorizontalAlign="HorizontalAlign.Center">
				<Columns>

					<RadzenDataGridColumn TItem="Procedure" Property="Procedure" Title="Procedure" Filterable="false" Sortable="false">
						<Template Context="procedure">
							<CodeableConceptHandler Data=procedure.Code />
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Procedure" Property="Reason" Title="Reason" Filterable="false" Sortable="false">
						<Template Context="procedure">
							@*This is because the reasoncode returns a list*@
							@foreach (var reason in procedure.ReasonCode)
							{
								<a>@reason.Text</a>
								<a></a>
							}
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Procedure" Property="BodySite" Title="BodySite" Filterable="false" Sortable="false">
						<Template Context="procedure">
							@*This is because the bodysite returns a list*@
							@foreach (var bodysite in procedure.BodySite)
							{
								<CodeableConceptHandler Data=bodysite />
								<a> </a>
							}
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Procedure" Property="Category" Title="Category" Filterable="false" Sortable="false">
						<Template Context="procedure">
							<CodeableConceptHandler Data=procedure.Category />
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Procedure" Property="Date" Title="Date" Filterable="false" Sortable="false">
						<Template Context="procedure">
							<DateHandler Data=procedure.Performed />
						</Template>
					</RadzenDataGridColumn>

					<RadzenDataGridColumn TItem="Procedure" Property="Id" Title="ID">
						<Template Context="procedure"><a href="@($"{serverURL}/Procedure/{procedure.Id}")">@procedure.Id</a></Template>
					</RadzenDataGridColumn>
				</Columns>

			</RadzenDataGrid>
		</ChildContent>
		<ErrorContent>
			<RadzenCard class="m-3">
				<h3 class="h5"><b>There was an error</b></h3>
			</RadzenCard>
		</ErrorContent>
	</ErrorBoundary>
}
else
{
	<Spinner Text="Procedures" />
}

@code {
	[Parameter] public string PatientID { get; set; }
	private Bundle search = new Bundle();
	private Hl7.Fhir.Model.Procedure[]? results;
	private Boolean loading = true;

	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	private static string serverURL = "http://hapi.fhir.org/baseR4";
	FhirClient client = new FhirClient(serverURL);

	public async ValueTask<Boolean> GetProcedureData()
	{
		loading = true;
		var sParams = new SearchParams()
			.Where("patient=" + PatientID)
			.LimitTo(100);

		search = client.Search<Procedure>(sParams);
		results = new Procedure[search.Entry.Count];

		for (int i = 0; i < search.Entry.Count; i++)
		{
			results[i] = (Procedure)search.Entry[i].Resource;
		}

		loading = false;
		return true;
	}

	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		await System.Threading.Tasks.Task.Delay(1);
		try
		{
			await GetProcedureData();
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}
		return;
	}
}




