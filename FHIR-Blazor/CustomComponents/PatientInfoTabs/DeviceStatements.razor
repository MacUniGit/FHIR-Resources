@*This page is the DeviceStatements tab show on the PatientInfo page. It returns all the known Device Use Statements linked to a patient ID*@

@page "/devicestatements/{PatientID}"
@using Hl7.Fhir.Model;
@using Hl7.Fhir.Rest;
@using Hl7.Fhir.Serialization;
@using FHIRBlazor.Pages;
@using FHIRBlazor.CustomComponents.TypeHandlers;

@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavManager

@if (!loading)
{
	<ErrorBoundary>
		<ChildContent>
			<RadzenDataGrid Data="@results" TItem="DeviceUseStatement" PageSize="10" AllowPaging="true"
						AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
						PagerHorizontalAlign="HorizontalAlign.Center">
				<Columns>
					<RadzenDataGridColumn TItem="DeviceUseStatement" Property="Device" Title="Device" Filterable="false" Sortable="false">
						<Template Context="devicestatement">
							@if (devicestatement.Device != null)
							{
								var temp = (ResourceReference)devicestatement.Device;

								@if (temp.Reference != null && temp.Reference.StartsWith("Device"))
								{
									@*Due to device reference, open dialogue to view device specifically*@
									@*This is not yet configured *@
									<RadzenButton ButtonStyle="ButtonStyle.Light" Style="font-size: 14px; background-color: transparent; text-align:left; " Class="" Text="View Device" />
								}
								else
								{
									<a>@temp.Reference</a>
								}
							}
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="DeviceUseStatement" Property="Device" Title="Device ID" Filterable="false" Sortable="false">
						<Template Context="devicestatement">
							@if (devicestatement.Device != null)
							{
								var temp = (ResourceReference)devicestatement.Device;

								@if (temp.Reference != null && temp.Reference.StartsWith("Device"))
								{
									string output = temp.Reference.Substring(temp.Reference.IndexOf('/') + 1);
									<a href="@($"{NameSearch.serverURL}/Device/{output}")">@output</a>
								}
								else
								{
									<a>@temp.Reference</a>
								}
							}
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="DeviceUseStatement" Property="Reason" Title="Reason" Filterable="false" Sortable="false">
						<Template Context="devicestatement">
							@foreach (var reason in devicestatement.ReasonCode)
							{
								<CodeableConceptHandler Data=reason />
							}
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="DeviceUseStatement" Property="Timing" Title="Timing" Filterable="false" Sortable="false">
						<Template Context="devicestatement">
							<DateHandler Data=devicestatement.Timing />
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="DeviceUseStatement" Property="Id" Title="ID">
						<Template Context="devicestatement"><a href="@($"{NameSearch.serverURL}/DeviceUseStatement/{devicestatement.Id}")">@devicestatement.Id</a></Template>
					</RadzenDataGridColumn>
				</Columns>
			</RadzenDataGrid>
		</ChildContent>
		<ErrorContent>
			<RadzenCard class="m-3">
				<h3 class="h5"><b>There was an error</b></h3>
			</RadzenCard>
		</ErrorContent>
	</ErrorBoundary>
}
else
{
	<Spinner Text="Device Use Statements" />
}

@code {
	[Parameter] public string PatientID { get; set; }
	private Bundle search = new Bundle();
	private Hl7.Fhir.Model.DeviceUseStatement[]? results;
	private Boolean loading = true;

	void ShowError(NotificationMessage message)
	{
		NotificationService.Notify(message);
		Console.WriteLine($"{message.Severity} notification");
	}
	private string errorMessage = "";

	FhirClient client = new FhirClient(NameSearch.serverURL);

	public async ValueTask<Boolean> GetDeviceUseStatements()
	{
		loading = true;
		var sParams = new SearchParams()
			.Where("patient=" + PatientID)
			.LimitTo(100);

		search = client.Search<DeviceUseStatement>(sParams);
		results = new DeviceUseStatement[search.Entry.Count];

		//for every search result
		for (int i = 0; i < search.Entry.Count; i++)
		{
			results[i] = (DeviceUseStatement)search.Entry[i].Resource;
		}

		loading = false;
		return true;
	}
	protected override async System.Threading.Tasks.Task OnInitializedAsync()
	{
		await System.Threading.Tasks.Task.Delay(1);
		try
		{
			await GetDeviceUseStatements();
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			ShowError(new NotificationMessage
				{
					Style = "position: relative; top: 1%; left: 60%; transform: translate(-35%, 35%); width: 60%; max-width: 3000px;",
					Severity = NotificationSeverity.Error,
					Summary = "There has been an error",
					Detail = errorMessage,
					Duration = 40000
				}
			);
			Console.WriteLine("Error info:" + ex.Message);
		}
		return;
	}
}




